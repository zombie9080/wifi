/* vim: set et sw=4 ts=4 sts=4 : */
/********************************************************************\
 * This program is free software; you can redistribute it and/or    *
 * modify it under the terms of the GNU General Public License as   *
 * published by the Free Software Foundation; either version 2 of   *
 * the License, or (at your option) any later version.              *
 *                                                                  *
 * This program is distributed in the hope that it will be useful,  *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of   *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    *
 * GNU General Public License for more details.                     *
 *                                                                  *
 * You should have received a copy of the GNU General Public License*
 * along with this program; if not, contact:                        *
 *                                                                  *
 * Free Software Foundation           Voice:  +1-617-542-5942       *
 * 59 Temple Place - Suite 330        Fax:    +1-617-542-2652       *
 * Boston, MA  02111-1307,  USA       gnu@gnu.org                   *
 *                                                                  *
 \********************************************************************/

/* $Id$ */
/** @file http.c
  @brief HTTP IO functions
  @author Copyright (C) 2004 Philippe April <papril777@yahoo.com>
  @author Copyright (C) 2007 Benoit Gr√©goire
  @author Copyright (C) 2007 David Bird <david@coova.com>

 */
/* Note that libcs other than GLIBC also use this macro to enable vasprintf */
#define _GNU_SOURCE

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <syslog.h>
#include <sys/types.h>
// add by zp
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h>

#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>

#include "httpd.h"

#include "safe.h"
#include "debug.h"
#include "conf.h"
#include "auth.h"
#include "firewall.h"
#include "http.h"
#include "client_list.h"
#include "common.h"
#include "centralserver.h"
#include "util.h"
#include "wd_util.h"
#include "simple_http.h"

#include "../config.h"


// add by zp 
void http_send_redirect_to_advertisement(request * r, const char *urlFragment, const char *text)
{
    char *url = (char *)malloc(1024);
    if(NULL == urlFragment)
    {
        sprintf(url,"http://www.baidu.com");
    //sprintf(url,"http://localhost:8888");
    //sprintf(url,"http://192.168.1.246:8888");
    //sprintf(url,"http://192.168.1.246:2060/wifidog/advertisement");
    //sprintf(url,"http://192.168.1.246:2060/wifidog/advertisement/?url=%s",urlFragment);
    }
    else
        sprintf(url,"%s\r\n",urlFragment);

    http_send_redirect(r, url, text);
    free(url);
}
void http_callback_advertisement(httpd * webserver, request * r)
{
    send_http_page(r, "advertisement", "vdiscovery.com");
}

#if 1
void wifidog_autoauth_to_authpuppy(request * r,char * original_url)
{
#if 0
    char *url1 = "GET /login/?gw_address=192.168.1.246&gw_port=2060&gw_id=123456&ip=192.168.1.246&mac=50:46:5d:75:ff:2c&url=http%3A%2F%2Fwww.baidu.com%2F HTTP/1.1\r\n"
                "User-Agent: wifidog\r\n"
                "Host: 120.25.100.117\r\n"

                //"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
                //"Accept: */*\r\n"
                //"Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3\r\n"
                //"Accept-Encoding: gzip, deflate\r\n"
                //"Cookie: authpuppy=0s39qe4ek1bljog34nit4iapf1\r\n"
                "Connection: keep-alive\r\n"
                "\r\n";
#endif
#if 1
    char *url2 = "POST /login/?gw_address=192.168.1.246&gw_port=2060&gw_id=123456&ip=192.168.1.246&mac=50:46:5d:75:ff:2c&url=http%3A%2F%2Fwww.baidu.com HTTP/1.1\r\n"
                "Host: 120.25.100.117\r\n"
                "User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0\r\n"
                //"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
                //"Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3\r\n"
                //"Accept-Encoding: gzip, deflate\r\n"
                //"Referer: http://120.25.100.117/login/?gw_address=192.168.1.246&gw_port=2060&gw_id=123456&ip=192.168.1.246&mac=50:46:5d:75:ff:2c&url=http%3A%2F%2Fwww.baidu.com%2F\r\n"
                //"Cookie: authpuppy=9jc8i976anlovn2b3vtnhhbom6\r\n"
                "Connection: keep-alive\r\n"
                "\r\n";
#endif
    char url3[1024]; 
    char url4[1024];

    int sockfd; 
    char buf[MAX_BUF];
    char *res;
    
#if 1
    int wifi_sock;
    struct sockaddr_in wifi_addr;
    if ((wifi_sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        printf("Failed to create a new SOCK_STREAM socket: %s\n", strerror(errno));
        return (-1);
    }
    wifi_addr.sin_port = htons(2060);
    wifi_addr.sin_family = AF_INET;
    //inet_pton(AF_INET,"127.0.0.1",&wifi_addr.sin_addr);
    inet_pton(AF_INET,"192.168.1.246",&wifi_addr.sin_addr);
    if (connect(wifi_sock, (struct sockaddr *)&wifi_addr, sizeof(struct sockaddr)) == -1) {
        printf("Failed to connect new socket to wifidog: %s\n", strerror(errno));
        return -1;
    }
#endif
    char token[64] = {0};
    char gw_id[64] = {0};
    char url[1024] = {0};
    char *sub = NULL;
#if 1 
    sockfd = connect_auth_server();
    res = http_get(sockfd, url1);
    debug(LOG_INFO, "RESPONSE0: %s", res);
    free(res);


#endif
#if 2
    sockfd = connect_auth_server();
    res = http_get(sockfd, url2);
    //free(url1);
    debug(LOG_INFO, "RESPONSE1: %s", res);
    sub = strstr(res,"token=");
    snprintf(token,41,sub+6);
    free(res);
#endif
#if 3
    sprintf(url3,"GET /wifidog/auth?token=%s HTTP/1.1\r\n"
                "Host: 192.168.1.246:2060\r\n"
                "User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0\r\n"
                "Connection: keep-alive\r\n"
                "\r\n",
                token
            );
    printf("URL3:%s\n",url3);
    res = http_get(wifi_sock, url3);
    close(wifi_sock);
    sub = strstr(res,"?gw_id=");
    sscanf(sub,"?gw_id=%s\r\n",gw_id);
    printf("gw_id:%s\n",gw_id);
    debug(LOG_INFO, "RESPONSE2: %s", res);
    free(res);
#endif
#if 4
    sprintf(url4,
            "GET /portal/?gw_id=%s HTTP/1.1\r\n"
            "Host: 120.25.100.117\r\n"
            "User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0\r\n"
            "Cookie: authpuppy=%s\r\n"
            "Connection: keep-alive\r\n"
            "\r\n",
            gw_id,
            "84526bjm5775m6v4s1qti93lh6"
            //""
            );
    sockfd = connect_auth_server();
    res = http_get(sockfd, url4);
    debug(LOG_INFO, "RESPONSE3: %s", res);
    sub = strstr(res,"Location: ");
    if( NULL == sub )
    {
        printf("sub is null\n");
        strcpy(url,original_url);
    }
    else
    {
        sscanf(sub,"Location: %s\r\n",url);
    }
    printf("4-url:%s\n",url);

    free(res);
#endif
#if 0
    http_send_redirect_to_advertisement(r,url,NULL);
#else
    http_send_redirect_to_advertisement(r,NULL,NULL);
#endif

    return ;
}
#endif

void simulated_client()
{
    char * response = NULL;
    char token[64];
    int sockfd = -1;
    char *url1 = "POST http://120.25.100.117/login/?gw_address=192.168.1.246&gw_port=2060&gw_id=123456&ip=192.168.1.246&mac=50:46:5d:75:ff:2c&url=http%3A%2F%2F192.168.1.246%3A2060%2F HTTP/1.0\r\n"
             "User-Agent: WiFiDog \r\n"
             "Host: 120.25.100.117\r\n"
             "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
             "Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3\r\n"
             "Accept-Encoding: gzip, deflate\r\n"
             "Cookie: authpuppy=0s39qe4ek1bljog34nit4iapf1\r\n"
             "Connection: keep-alive\r\n"
             "\r\n";
   // char *url2 = "GET http://192.168.1.246:2060/wifidog/auth?token=3ba6b4caefba1504d769ce96135005be959e22a0 HTTP/1.0\r\n"
   //          "User-Agent: WiFiDog \r\n"
   //          "Host: 192.168.1.246:2060\r\n"
   //          "\r\n";

    sockfd = connect_auth_server();
    response = http_get(sockfd,url1);

    debug(LOG_INFO, "response: %s", response);
//#if 1
//    char * tmp = NULL;
//    if ((tmp = strstr(response, "Auth: "))) {
//        if (sscanf(tmp, "Auth: %d", token) == 1) {
//            debug(LOG_INFO, "Auth server returned authentication code %d", token);
//            free(res);
//            return (authresponse->authcode);
//        } else {
//            debug(LOG_WARNING, "Auth server did not return expected authentication code");
//            free(res);
//            return (AUTH_ERROR);
//        }
//    }
//    url = f(token);
//#endif
//    char * url3 = "";
//    http_send_redirect(r, url3, text);

    free(response);
    return ;
}



/** The 404 handler is also responsible for redirecting to the auth server */
void
http_callback_404(httpd * webserver, request * r, int error_code)
{
    char tmp_url[MAX_BUF], *url, *mac;
    s_config *config = config_get_config();
    t_auth_serv *auth_server = get_auth_server();

    memset(tmp_url, 0, sizeof(tmp_url));
    /* 
     * XXX Note the code below assumes that the client's request is a plain
     * http request to a standard port. At any rate, this handler is called only
     * if the internet/auth server is down so it's not a huge loss, but still.
     */
    snprintf(tmp_url, (sizeof(tmp_url) - 1), "http://%s%s%s%s",
             r->request.host, r->request.path, r->request.query[0] ? "?" : "", r->request.query);
    url = httpdUrlEncode(tmp_url);
    // add by zp 
    debug(LOG_INFO, "url:%s,tmp_url:%s",url,tmp_url);


    if (!is_online()) {
        /* The internet connection is down at the moment  - apologize and do not redirect anywhere */
        char *buf;
        safe_asprintf(&buf,
                      "<p>We apologize, but it seems that the internet connection that powers this hotspot is temporarily unavailable.</p>"
                      "<p>If at all possible, please notify the owners of this hotspot that the internet connection is out of service.</p>"
                      "<p>The maintainers of this network are aware of this disruption.  We hope that this situation will be resolved soon.</p>"
                      "<p>In a while please <a href='%s'>click here</a> to try your request again.</p>", tmp_url);

        send_http_page(r, "Uh oh! Internet access unavailable!", buf);
        free(buf);
        debug(LOG_INFO, "Sent %s an apology since I am not online - no point sending them to auth server",
              r->clientAddr);
    } else if (!is_auth_online()) {
        /* The auth server is down at the moment - apologize and do not redirect anywhere */
        char *buf;
        safe_asprintf(&buf,
                      "<p>We apologize, but it seems that we are currently unable to re-direct you to the login screen.</p>"
                      "<p>The maintainers of this network are aware of this disruption.  We hope that this situation will be resolved soon.</p>"
                      "<p>In a couple of minutes please <a href='%s'>click here</a> to try your request again.</p>",
                      tmp_url);

        send_http_page(r, "Uh oh! Login screen unavailable!", buf);
        free(buf);
        debug(LOG_INFO, "Sent %s an apology since auth server not online - no point sending them to auth server",
              r->clientAddr);
    } else {
        /* Re-direct them to auth server */
        char *urlFragment;

        // modify by zp
        //if (!(mac = arp_get(r->clientAddr))) {
        if (!(mac = "50:46:5d:75:ff:2c")) {
            /* We could not get their MAC address */
            debug(LOG_INFO, "Failed to retrieve MAC address for ip %s, so not putting in the login request",
                  r->clientAddr);
            safe_asprintf(&urlFragment, "%sgw_address=%s&gw_port=%d&gw_id=%s&ip=%s&url=%s",
                          auth_server->authserv_login_script_path_fragment, config->gw_address, config->gw_port,
                          config->gw_id, r->clientAddr, url);
        } else {
            debug(LOG_INFO, "Got client MAC address for ip %s: %s", r->clientAddr, mac);
            safe_asprintf(&urlFragment, "%sgw_address=%s&gw_port=%d&gw_id=%s&ip=%s&mac=%s&url=%s",
                          auth_server->authserv_login_script_path_fragment,
                          config->gw_address, config->gw_port, config->gw_id, r->clientAddr, mac, url);
            // remove by zp
            //free(mac);
        }

        // if host is not in whitelist, maybe not in conf or domain'IP changed, it will go to here.
        debug(LOG_INFO, "Check host %s is in whitelist or not", r->request.host);       // e.g. www.example.com
        t_firewall_rule *rule;
        //e.g. example.com is in whitelist
        // if request http://www.example.com/, it's not equal example.com.
        for (rule = get_ruleset("global"); rule != NULL; rule = rule->next) {
            debug(LOG_INFO, "rule mask %s", rule->mask);
            if (strstr(r->request.host, rule->mask) == NULL) {
                debug(LOG_INFO, "host %s is not in %s, continue", r->request.host, rule->mask);
                continue;
            }
            int host_length = strlen(r->request.host);
            int mask_length = strlen(rule->mask);
            if (host_length != mask_length) {
                char prefix[1024] = { 0 };
                // must be *.example.com, if not have ".", maybe Phishing. e.g. phishingexample.com
                strncpy(prefix, r->request.host, host_length - mask_length - 1);        // e.g. www
                strcat(prefix, ".");    // www.
                strcat(prefix, rule->mask);     // www.example.com
                if (strcasecmp(r->request.host, prefix) == 0) {
                    debug(LOG_INFO, "allow subdomain");
                    fw_allow_host(r->request.host);
                    http_send_redirect(r, tmp_url, "allow subdomain");
                    free(url);
                    free(urlFragment);
                    return;
                }
            } else {
                // e.g. "example.com" is in conf, so it had been parse to IP and added into "iptables allow" when wifidog start. but then its' A record(IP) changed, it will go to here.
                debug(LOG_INFO, "allow domain again, because IP changed");
                fw_allow_host(r->request.host);
                http_send_redirect(r, tmp_url, "allow domain");
                free(url);
                free(urlFragment);
                return;
            }
        }

#if 0
        // add by zp
        char * text = "advertisement"; 
        debug(LOG_INFO,"urlfragment:%s\n",urlFragment);
        //request * req = malloc(sizeof);
        http_send_redirect_to_advertisement(r, urlFragment, text);
        return ;
#endif


#if 0
        debug(LOG_INFO, "Captured %s requesting [%s] and re-directing them to login page", r->clientAddr, url);
        http_send_redirect_to_auth(r, urlFragment, "Redirect to login page");
#else
        //pthread_t tid;
        //pthread_create(&tid,NULL,wifidog_autoauth_to_authpuppy,r);
        wifidog_autoauth_to_authpuppy(r,tmp_url);
#endif
        free(urlFragment);
    }
    free(url);
}

void
http_callback_wifidog(httpd * webserver, request * r)
{
    send_http_page(r, "WiFiDog", "Please use the menu to navigate the features of this WiFiDog installation.");
}

void
http_callback_about(httpd * webserver, request * r)
{
    send_http_page(r, "About WiFiDog", "This is WiFiDog version <strong>" VERSION "</strong>");
}

void
http_callback_status(httpd * webserver, request * r)
{
    const s_config *config = config_get_config();
    char *status = NULL;
    char *buf;

    if (config->httpdusername &&
        (strcmp(config->httpdusername, r->request.authUser) ||
         strcmp(config->httpdpassword, r->request.authPassword))) {
        debug(LOG_INFO, "Status page requested, forcing authentication");
        httpdForceAuthenticate(r, config->httpdrealm);
        return;
    }

    status = get_status_text();
    safe_asprintf(&buf, "<pre>%s</pre>", status);
    send_http_page(r, "WiFiDog Status", buf);
    free(buf);
    free(status);
}

/** @brief Convenience function to redirect the web browser to the auth server
 * @param r The request
 * @param urlFragment The end of the auth server URL to redirect to (the part after path)
 * @param text The text to include in the redirect header ant the mnual redirect title */
void
http_send_redirect_to_auth(request * r, const char *urlFragment, const char *text)
{
    char *protocol = NULL;
    int port = 80;
    t_auth_serv *auth_server = get_auth_server();

    if (auth_server->authserv_use_ssl) {
        protocol = "https";
        port = auth_server->authserv_ssl_port;
    } else {
        protocol = "http";
        port = auth_server->authserv_http_port;
    }

    char *url = NULL;
    safe_asprintf(&url, "%s://%s:%d%s%s",protocol, auth_server->authserv_hostname, port, auth_server->authserv_path, urlFragment);
    //safe_asprintf(&url, "%s://%s:%d%s%s",protocol, auth_server->authserv_hostname, port, auth_server->authserv_path, urlFragment);
    http_send_redirect(r, url, text);
    fprintf(stderr,"URL:%s\n",url);
    //wifidog_autoauth_to_authpuppy(url);
    free(url);
}

/** @brief Sends a redirect to the web browser 
 * @param r The request
 * @param url The url to redirect to
 * @param text The text to include in the redirect header and the manual redirect link title.  NULL is acceptable */
void
http_send_redirect(request * r, const char *url, const char *text)
{
    char *message = NULL;
    char *header = NULL;
    char *response = NULL;
    /* Re-direct them to auth server */
    debug(LOG_DEBUG, "Redirecting client browser to %s", url);
    safe_asprintf(&header, "Location: %s", url);
    safe_asprintf(&response, "302 %s\n", text ? text : "Redirecting");
    httpdSetResponse(r, response);
    httpdAddHeader(r, header);
    free(response);
    free(header);
    safe_asprintf(&message, "Please <a href='%s'>click here</a>.", url);
    //safe_asprintf(&message, "<form method="POST" action="http://120.25.100.117/login/?gw_address=192.168.1.246&gw_port=2060&gw_id=123456&ip=192.168.1.246&mac=50:46:5d:75:ff:2c&url=http%3A%2F%2F192.168.1.246%3A2060%2F">
    //safe_asprintf(&message, "<form method='POST' action='http://120.25.100.117/login/?gw_address=192.168.1.246&gw_port=2060&gw_id=123456&ip=192.168.1.246&mac=50:46:5d:75:ff:2c&url=http%3A%2F%2Fwww.baidu.com'><input type='submit' value='Login'></form>");
#if 0
    safe_asprintf(&message, "<form method=\"POST\" action=\"%s\">"
            "<input type=\"hidden\" value=\"123456\" name=\"gw_id\">"
            "<input type=\"hidden\" value=\"192.168.1.246\" name=\"gw_address\">"
            "<input type=\"hidden\" value=\"2060\" name=\"gw_port\">"
            "<input id=\"authenticators\" type=\"hidden\" value=\"apDefaultAuthenticator\" name=\"authenticator\">"
            "<input type=\"submit\" value=\"Login\"></form>",url);
#endif
    send_http_page(r, text ? text : "Redirection to message", message);
    free(message);
}

void
http_callback_auth(httpd * webserver, request * r)
{
    t_client *client;
    httpVar *token;
    char *mac;
    httpVar *logout = httpdGetVariableByName(r, "logout");

    if ((token = httpdGetVariableByName(r, "token"))) {
        /* They supplied variable "token" */
        // modify by zp
        if (!(mac = "50:46:5d:75:ff:2c")) {
        //if (!(mac = arp_get(r->clientAddr))) {
            /* We could not get their MAC address */
            debug(LOG_ERR, "Failed to retrieve MAC address for ip %s", r->clientAddr);
            send_http_page(r, "WiFiDog Error", "Failed to retrieve your MAC address");
        } else {
            /* We have their MAC address */
            LOCK_CLIENT_LIST();

            if ((client = client_list_find(r->clientAddr, mac)) == NULL) {
                debug(LOG_DEBUG, "New client for %s", r->clientAddr);
                client_list_add(r->clientAddr, mac, token->value);
            } else if (logout) {
                logout_client(client);
            } else {
                debug(LOG_DEBUG, "Client for %s is already in the client list", client->ip);
            }

            UNLOCK_CLIENT_LIST();
            if (!logout) { /* applies for case 1 and 3 from above if */
                authenticate_client(r);
            }
            // remove by zp
            //free(mac);
        }
    } else {
        /* They did not supply variable "token" */
        send_http_page(r, "WiFiDog error", "Invalid token");
    }
}

void
http_callback_disconnect(httpd * webserver, request * r)
{
    const s_config *config = config_get_config();
    /* XXX How do you change the status code for the response?? */
    httpVar *token = httpdGetVariableByName(r, "token");
    httpVar *mac = httpdGetVariableByName(r, "mac");

    if (config->httpdusername &&
        (strcmp(config->httpdusername, r->request.authUser) ||
         strcmp(config->httpdpassword, r->request.authPassword))) {
        debug(LOG_INFO, "Disconnect requested, forcing authentication");
        httpdForceAuthenticate(r, config->httpdrealm);
        return;
    }

    if (token && mac) {
        t_client *client;

        LOCK_CLIENT_LIST();
        client = client_list_find_by_mac(mac->value);

        if (!client || strcmp(client->token, token->value)) {
            UNLOCK_CLIENT_LIST();
            debug(LOG_INFO, "Disconnect %s with incorrect token %s", mac->value, token->value);
            httpdOutput(r, "Invalid token for MAC");
            return;
        }

        /* TODO: get current firewall counters */
        logout_client(client);
        UNLOCK_CLIENT_LIST();

    } else {
        debug(LOG_INFO, "Disconnect called without both token and MAC given");
        httpdOutput(r, "Both the token and MAC need to be specified");
        return;
    }

    return;
}

void
send_http_page(request * r, const char *title, const char *message)
{
    s_config *config = config_get_config();
    char *buffer;
    struct stat stat_info;
    int fd;
    ssize_t written;

    fd = open(config->htmlmsgfile, O_RDONLY);
    if (fd == -1) {
        debug(LOG_CRIT, "Failed to open HTML message file %s: %s", config->htmlmsgfile, strerror(errno));
        return;
    }

    if (fstat(fd, &stat_info) == -1) {
        debug(LOG_CRIT, "Failed to stat HTML message file: %s", strerror(errno));
        close(fd);
        return;
    }
    // Cast from long to unsigned int
    buffer = (char *)safe_malloc((size_t) stat_info.st_size + 1);
    written = read(fd, buffer, (size_t) stat_info.st_size);
    if (written == -1) {
        debug(LOG_CRIT, "Failed to read HTML message file: %s", strerror(errno));
        free(buffer);
        close(fd);
        return;
    }
    close(fd);

    buffer[written] = 0;
    httpdAddVariable(r, "title", title);
    httpdAddVariable(r, "message", message);
    httpdAddVariable(r, "nodeID", config->gw_id);
    httpdOutput(r, buffer);
    free(buffer);
}
